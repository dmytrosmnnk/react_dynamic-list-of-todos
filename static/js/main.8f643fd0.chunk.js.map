{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedUserId","selectUser","useState","query","setQuery","statusFilter","setStatusFilter","random","setRandom","visibleTodos","useMemo","filter","todo","title","toLocaleLowerCase","includes","completed","sort","t1","t2","Math","id","className","type","name","placeholder","autoComplete","value","onChange","event","target","onClick","map","checked","readOnly","userId","getData","url","fetch","then","resp","ok","json","Promise","reject","status","statusText","CurrentUser","clearUser","user","setUser","errorMess","setErrorMess","useEffect","userFromServer","catch","error","email","phone","App","setSelectedUserId","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f643fd0.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport React, { useMemo, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  selectUser,\n}) => {\n  const [query, setQuery] = useState<string>('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [random, setRandom] = useState<boolean>(false);\n\n  const visibleTodos = useMemo(() => (\n    todos\n      .filter(todo => todo.title.toLocaleLowerCase().includes(query.toLocaleLowerCase()))\n      .filter(todo => {\n        switch (statusFilter) {\n          case 'all':\n            return todo;\n\n          case 'active':\n            return todo.completed === false;\n\n          case 'completed':\n            return todo.completed;\n\n          default:\n            return 0;\n        }\n      })\n      .sort((t1, t2) => (\n        random\n          ? Math.random() - 0.5\n          : t1.id - t2.id\n      ))\n  ), [query, statusFilter, random]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusFilter(event.target.value);\n  };\n\n  const randomize = () => {\n    setRandom(!random);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <div className=\"TodoList__item TodoList__item-filters\">\n          <input\n            className=\"TodoList__item-filters--title\"\n            type=\"text\"\n            name=\"query\"\n            placeholder=\"Enter todo`s title\"\n            autoComplete=\"off\"\n            value={query}\n            onChange={handleInput}\n            data-cy=\"filterByTitle\"\n          />\n          <select\n            className=\"TodoList__item-filters--status\"\n            name=\"status\"\n            value={statusFilter}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n          <button\n            className={\n              random\n                ? 'button button-active TodoList__item-filters--random'\n                : 'button TodoList__item-filters--random'\n            }\n            type=\"button\"\n            onClick={randomize}\n          >\n            Randomize\n          </button>\n        </div>\n\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className={\n                todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n              }\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={\n                  selectedUserId === todo.userId\n                    ? 'TodoList__user-button button TodoList__user-button--selected'\n                    : 'TodoList__user-button button'\n                }\n                type=\"button\"\n                onClick={() => selectUser(todo.userId)}\n                data-cy=\"userButton\"\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable prefer-promise-reject-errors */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getData = (url: string) => {\n  return (fetch(`${BASE_URL}/${url}`)\n    .then(resp => (resp.ok\n      ? resp.json()\n      : Promise.reject(`${resp.status} - ${resp.statusText}`)))\n  );\n};\n\nexport const getTodos = () => getData('/todos');\nexport const getUsers = () => getData('/users');\nexport const getUser = (id: number) => getData(`/users/${id}`);\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\ntype User = {\n  id: number;\n  name: string;\n  username?: string;\n  email: string;\n  phone: string;\n  website?: string;\n} | null;\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [user, setUser] = useState<User>(null);\n  const [errorMess, setErrorMess] = useState<string>('');\n\n  useEffect(() => {\n    getUser(userId)\n      .then((userFromServer) => setUser(userFromServer))\n      .catch((error) => {\n        setUser(null);\n        setErrorMess(`ERROR: Can't find user with id #${userId}!\n          <${error}>`);\n      });\n  }, [userId]);\n\n  return (\n    <>\n      {user\n        ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__button-clear\"\n              onClick={() => {\n                clearUser();\n                setUser(null);\n              }}\n            >\n              Clear\n            </button>\n          </div>\n        ) : (\n          <div>{errorMess && errorMess}</div>\n        )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nexport type Todo = {\n  id: number;\n  createdAt?: string,\n  updatedAt?: string,\n  userId: number;\n  title: string;\n  completed: boolean;\n};\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [todos, setTodos] = useState<Todo[] | null>(null);\n  const [errorMess, setErrorMess] = useState<string>('');\n\n  useEffect(() => {\n    getTodos()\n      .then((todosFromServer) => setTodos(todosFromServer))\n      .catch(error => setErrorMess(`ERROR: Can't load todos! --- <${error}>`));\n  }, []);\n\n  const selectUser = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos\n          ? (\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              selectUser={selectUser}\n            />\n          )\n          : <p>{errorMess}</p>}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}